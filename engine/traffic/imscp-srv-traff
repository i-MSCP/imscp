#!/usr/bin/perl
# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2016 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
no if $] >= 5.017011, warnings => 'experimental::smartmatch';
use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::Database;
use iMSCP::Getopt;
use File::Basename;

sub run
{
	my ($inputTraffic, $outputTraffic, $stdout, $stderr);
	my %chains = (
		'IMSCP_INPUT' => \$inputTraffic,
		'IMSCP_OUTPUT' => \$outputTraffic
	);

	# Get traffic data from both input and output i-MSCP chains
	while(my ($chain, $target) = each %chains) {
		my $rs = execute("iptables -nvxL $chain", $target, \$stderr);
		debug($$target) if $$target;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;
	}

	# Parse input traffic data
	my ($smtpIn, $poIn, $httpIn, $allIn) = _parseTrafficData($inputTraffic);

	# Parse output traffic data
	my ($smtpOut, $poOut, $httpOut, $allOut) = _parseTrafficData($outputTraffic);

	# Update traffic data in database
	my $timestamp = time();
	$timestamp -= ($timestamp % 1800); # Floor down for the last half'n hour
	my $dbh = iMSCP::Database->factory()->getRawDb();
	my $qrs = $dbh->do(
		'
			INSERT INTO server_traffic (
				traff_time, bytes_in, bytes_out, bytes_mail_in, bytes_mail_out, bytes_pop_in, bytes_pop_out,
				bytes_web_in, bytes_web_out
			) VALUES (
				?, ?, ?, ?, ?, ?, ?, ?, ?
			) ON DUPLICATE KEY UPDATE
				bytes_in = bytes_in + ?, bytes_out = bytes_out + ?, bytes_mail_in = bytes_mail_in + ?,
				bytes_mail_out = bytes_mail_out + ?, bytes_pop_in = bytes_pop_in + ?, bytes_pop_out = bytes_pop_out + ?,
				bytes_web_in = bytes_web_in + ?, bytes_web_out = bytes_web_out + ?
		',
		undef,
		$timestamp,
		$allIn, $allOut, $smtpIn, $smtpOut, $poIn, $poOut, $httpIn, $httpOut,
		$allIn, $allOut, $smtpIn, $smtpOut, $poIn, $poOut, $httpIn, $httpOut
	);
	if($dbh->err) {
		error($dbh->errstr);
		return 1;
	}

	# Reset both input and output i-MSCP chains
	for my $chain(keys %chains) {
		my $rs = execute("iptables -Z $chain", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;
	}

	0;
}

sub _parseTrafficData
{
	my $data = shift;

	my $frontEndHttpPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTP_PORT'};
	my $frontEndHttpsPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTPS_PORT'};
	my ($smtp, $po, $http, $all) = (0, 0, 0, 0);

	if($data) {
		while($data =~ /^\s+\d+\s+(\d+).*?(?:(?:dpt|spt):(\d+))?$/gm) {
			my ($bytes, $port) = ($1, $2 // 0);

			if($port > 0) {
				$smtp += $bytes if $port ~~ [ 587, 25, 465 ];
				$po += $bytes if $port ~~ [ 110, 995, 143, 993 ];
				$http += $bytes if $port ~~ [ 80, 443, $frontEndHttpPort, $frontEndHttpsPort ];
			} else {
				$all = $bytes;
			}
		}
	}

	($smtp, $po, $http, $all);
}

newDebug('imscp-srv-traff.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {

Script which collects i-MSCP server' traffic data.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-srv-traff.lock', 'nowait');
$bootstrapper->boot({ norequirements => 'yes', nolock => 'yes', config_readonly => 'yes' });

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-srv-traff.lock');
exit $rs;
