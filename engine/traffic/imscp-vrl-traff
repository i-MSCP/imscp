#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2014 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2014 by i-MSCP | http://i-mscp.net
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";

use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Servers;
use iMSCP::Database;
use iMSCP::HooksManager;

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

newDebug('imscp-vrl-traff.log');

silent(1);

umask(027);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-vrl-traff.lock', 'nowait');
$bootstrapper->boot({ 'norequirements' => 'yes', 'nolock' => 'yes', 'config_readonly' => 'yes' });

sub run
{
	my $rs = iMSCP::HooksManager->getInstance()->trigger('beforeVrlTraffic');
	return $rs if $rs;

	# Collects traffic data

	my $timestamp = time();
	my %trafficDb;

	for(iMSCP::Servers->getInstance()->get()) {
		next if $_ eq 'noserver';

		my $package = "Servers::$_";

		eval "require $package";

		unless($@) {
			my $instance = $package->factory();

			if ($instance->can('getTraffic')) {
				eval {
					# Any getTraffic() method from server implementations must die with last error message on failure
					debug("Calling Servers::${_}::getTraffic()");
					$trafficDb{$_} = $instance->getTraffic($timestamp);
				};

				if ($@) {
					error($@);
					$rs = 1;
					last;
				}
			}
		} else {
			error($@);
			$rs = 1;
			last;
		}
	}

	# Updating traffic for known domains (Here, we do not process traffic data for disabled domains)

	unless($rs) {
		my $db = iMSCP::Database->factory();

		# Getting list of all domains (dmn|sub|als|alssub)
		my $domains = $db->doQuery(
			'domain_name',
			"
				SELECT
					domain_id, domain_name
				FROM
					domain
				WHERE
					domain_status <> 'disabled'
				UNION
				SELECT
					domain_id, alias_name
				FROM
					domain_aliasses
				WHERE
					alias_status <> 'disabled'
				UNION
				SELECT
					domain_id, CONCAT(subdomain_name, '.', domain_name)
				FROM
					subdomain
				INNER JOIN
					domain USING (domain_id)
				WHERE
					subdomain_status <> 'disabled'
				UNION
				SELECT
					domain_id, CONCAT(subdomain_alias_name, '.', alias_name)
				FROM
					subdomain_alias
				INNER JOIN
					domain_aliasses USING (alias_id)
				WHERE
					subdomain_alias_status <> 'disabled'
			"
		);
		unless (ref $domains eq 'HASH') {
			error($domains);
			$rs = 1;
		} elsif(%{$domains}) {
			# Floor down for the last half'n our to make timestamps in server_traffic and domain_traffic the same
			my $halfTimestamp = $timestamp - ($timestamp % 1800);

			for(keys %{$domains}) {
				next unless $trafficDb{'httpd'}->{$_} || $trafficDb{'ftpd'}->{$_} || $trafficDb{'mta'}->{$_} ||
					$trafficDb{'po'}->{$_};

				my $httpdTraffic = $trafficDb{'httpd'}->{$_} ? $trafficDb{'httpd'}->{$_} : 0;
				my $ftpdTraffic = $trafficDb{'ftpd'}->{$_} ? $trafficDb{'ftpd'}->{$_} : 0;
				my $mtaTraffic = $trafficDb{'mta'}->{$_} ? $trafficDb{'mta'}->{$_} : 0;
				my $poTraffic = $trafficDb{'po'}->{$_} ? $trafficDb{'po'}->{$_} : 0;

				my $domainId = $domains->{$_}->{'domain_id'};
				my $rawDb = $db->startTransaction();

				eval {
					my $rdata = iMSCP::Database->factory()->doQuery(
						'dtraff_id',
						'SELECT dtraff_id FROM domain_traffic WHERE domain_id = ? AND dtraff_time >= ? LIMIT 1',
						$_, $timestamp
					);

					unless (ref $rdata eq 'HASH') {
						die($rdata);
					} elsif (%{$rdata}) {
						$rawDb->do(
							'
								UPDATE
									domain_traffic
								SET
									dtraff_web = dtraff_web + ?, dtraff_ftp = dtraff_ftp + ?,
									dtraff_mail = dtraff_mail + ?, dtraff_pop = dtraff_pop + ?, dtraff_time = ?
								WHERE
									domain_id = ?
								AND
									dtraff_id = ?
							',
							undef, $httpdTraffic, $ftpdTraffic, $mtaTraffic, $poTraffic, $halfTimestamp, $domainId,
							(keys %{$rdata})[0]
						);
					} else {
						$rawDb->do(
							'
								INSERT INTO domain_traffic (
									domain_id, dtraff_time, dtraff_web, dtraff_ftp, dtraff_mail, dtraff_pop
								) VALUES (
									?, ?, ?, ?, ?, ?
								)
							',
							undef, $domainId, $halfTimestamp, $httpdTraffic, $ftpdTraffic, $mtaTraffic, $poTraffic
						);
					}

					$trafficDb{'httpd'}->{$_} = 0;
					$trafficDb{'ftpd'}->{$_} = 0;
					$trafficDb{'mta'}->{$_} = 0;
					$trafficDb{'po'}->{$_} = 0;

					$rawDb->commit();
				};

				if($@) {
					$rawDb->rollback();
					$trafficDb{'httpd'}->{$_} = $httpdTraffic;
					$trafficDb{'ftpd'}->{$_} = $ftpdTraffic;
					$trafficDb{'mta'}->{$_} = $mtaTraffic;
					$trafficDb{'po'}->{$_} = $poTraffic;
					error("$@");
					$rs = 1;
				}

				$db->endTransaction();
			}
		}
	}

	# Event triggered only if no error occured for the whole process
	$rs ||= iMSCP::HooksManager->getInstance()->trigger('afterVrlTraffic');

	if($rs) {
		require iMSCP::Mail;
		iMSCP::Mail->new()->errmsg(join "\n\n", iMSCP::Debug::getLastError());
	}

	$rs;
}

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-vrl-traff.lock');
exit $rs;
