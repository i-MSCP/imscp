#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2015 by i-MSCP | http://i-mscp.net
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

# This script disables entities (dmn, als, sub, alssub and mail) of expired accounts ; It is run once per day
# See /etc/cron.d/imscp

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";

use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use Crypt::PasswdMD5;

# Turn off localisation features to force any command output to be in English
$ENV{'LANG'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

umask(027);

newDebug('imscp-disable-accounts.log');

silent(1);

sub startUp
{
	iMSCP::Bootstrapper->getInstance()->boot(
		{ 'nolock' => 'yes', 'norequirements' => 'yes', 'config_readonly' => 'yes' }
	);
}

sub process
{
	my $db = iMSCP::Database->factory();

	# Get needed configuration parameter value
	my $rdata = $db->doQuery('name', "SELECT * FROM `config` WHERE `name` = 'HARD_MAIL_SUSPENSION'");
	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	my $hardMailSuspension = $rdata->{'HARD_MAIL_SUSPENSION'}->{'value'};

	# Gets ids of all expired accounts
	my $accounts = $db->doQuery(
		'domain_id',
		"
			SELECT
				`domain_id`, `domain_admin_id`
			FROM
				`domain`
			WHERE
				`domain_expires` <> '0'
			AND
				`domain_expires` <  UNIX_TIMESTAMP()
			AND
				`domain_status` <> 'disabled'
		"
	);
	unless(ref $accounts eq 'HASH') {
		error($accounts);
		return 1;
	}

	my $rawDb = $db->startTransaction();
	my $rs = 0;

	if(%{$accounts}) {
		for(keys %{$accounts}) {
			my $dmnId = $_;

			eval {
				my $mails = $db->doQuery(
		 			'mail_id',
		 			'SELECT `mail_id`, `mail_pass`, `mail_type` FROM `mail_users` WHERE `domain_id` = ?',
		 			$dmnId
				);

				# Schedule mail accounts deactivation
				# soft or hard way according to the HARD_MAIL_SUSPENSION configuration parameter value
				if(%{$mails}) {
					for(keys %{$mails}) {
						my $mailId = $mails->{$_}->{'mail_id'};
						my $mailPassword = $mails->{$_}->{'mail_pass'};
						my $mailType = $mails->{$_}->{'mail_type'};
						my $newMailStatus = 'todisable';

						if (!$hardMailSuspension) {
							if ($mailType =~ /^(?:normal_mail|alias_mail|subdom_mail|alssub_mail)/) {
								$mailPassword = substr(unix_md5_crypt(time()), 3, 4) . $mailPassword;
							} else {
								next;
							}

							$newMailStatus = 'tochange';
						}

						$rawDb->do(
							'UPDATE `mail_users` SET `mail_pass` = ?, `status` = ? WHERE `mail_id` = ?',
							undef, $mailPassword, $newMailStatus, $mailId
						);
					}
				}

				# Schedule domain deactivation
				$rawDb->do('UPDATE `domain` SET `domain_status` = ? WHERE `domain_id` = ?', undef, 'todisable', $dmnId);

				# Schedule subdomains deactivation
				$rawDb->do(
					'UPDATE `subdomain` SET `subdomain_status` = ? WHERE `domain_id` = ?', undef, 'todisable', $dmnId
				);

				# Schedule domain aliases deactivation
				$rawDb->do(
					'UPDATE `domain_aliasses` SET `alias_status` = ? WHERE `domain_id` = ?', undef, 'todisable', $dmnId
				);

				# Schedule domain aliases's subdomains deactivation
				$rawDb->do(
					'
						UPDATE
							`subdomain_alias`
						SET
							`subdomain_alias_status` = ?
						WHERE
							`alias_id` IN (SELECT `alias_id` FROM `domain_aliasses` WHERE `domain_id` = ?)
					',
					undef, 'todisable', $dmnId
				);

				$rawDb->commit();
			};

			if($@) {
				$rawDb->rollback();
				$db->endTransaction();
				error("Unable to schedule deactivation of customer with ID $accounts->{$_}->{'domain_admin_id'}: $@");
				$rs = 1;
			}
		}

		$db->endTransaction();

		# Run request manager to process all scheduled tasks
		if(!$rs) {
			my ($stdout, $stderr);
			$rs = execute(
				"$main::imscpConfig{'CMD_PERL'} $main::imscpConfig{'ENGINE_ROOT_DIR'}/imscp-rqst-mngr",
				\$stdout,
				\$stderr
			);
			debug $stdout if $stdout;
			error($stderr) if $stderr && $rs;
			warning($stderr) if $stderr && !$rs;
		}
	}

	$rs;
}

startUp();
exit process();
