#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright 2010-2015 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2015 by i-MSCP | http://i-mscp.net
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin", "$FindBin::Bin/engine/PerlLib", "$FindBin::Bin/engine/PerlVendor";

umask(022);

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

use iMSCP::Debug;
use iMSCP::Requirements;
use iMSCP::Dialog;
use iMSCP::Dir;
use iMSCP::Getopt;
use File::Basename;
use autoinstaller::Functions qw/loadConfig build install/;

newDebug('imscp-autoinstall.log');

# Entering in silent mode
silent(1);

# Load config
loadConfig();

# Ensure that this script is run by root user
iMSCP::Requirements->new()->user();

# Initialize autoinstaller options
$main::buildonly = 0;
$main::forcereinstall = 0;
$main::skippackages = 0;

# Add autoinstaller options
iMSCP::Getopt->parse(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {
 -b,    --build-only          Process build steps only.
 -f,    --force-reinstall     Force reinstallation of distro packages.
 -s,    --skip-packages       Do not install/update distro packages.},
 'build-only|b' => \$main::buildonly,
 'force-reinstall|f' => \$main::forcereinstall,
 'skip-packages|s' => \$main::skippackages
);

# Set verbose mode
verbose(iMSCP::Getopt->debug || $main::imscpConfig{'DEBUG'});

# Getting reconfigure option value
$main::reconfigure = iMSCP::Getopt->reconfigure;

# Global variable that holds questions
%main::questions = () unless %main::questions;

# Handle preseed option
my $preseedFile = iMSCP::Getopt->preseed;
if($preseedFile) {
	require $preseedFile;
	# The preseed option supersede the reconfigure option
	iMSCP::Getopt->reconfigure('none');
	$main::reconfigure = 'none';
	undef $preseedFile;
}

# Handle hook-file option
my $hookFile = iMSCP::Getopt->hookFile;
if($hookFile) {
	require $hookFile;
	undef $hookFile;
}

# Handle noprompt option
$main::noprompt = iMSCP::Getopt->noprompt;
if($main::noprompt) {
	debugRegisterCallBack(
		sub {
			if($?) { # We exit with status 5 from iMSCP::Dialog in noninteractive mode
				if($? == 5) {
					if(iMSCP::Getopt->preseed) {
						print STDERR output('Missing or bad entry found in your preseed file.', 'fatal');
					} else {
						print STDERR output('Missing or bad entry found in configuration file.', 'fatal');
					}
				}
			} else {
				$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

				unless($main::buildonly) {
					print STDOUT output('i-MSCP has been successfully installed/updated.', 'ok');
				} else {
					print STDOUT output('i-MSCP has been successfully built.', 'ok');
				}
			}
		}
	);

	unless($main::buildonly) {
		print STDOUT output("Installation in progress... Please wait.");
	} else {
		print STDOUT output("Build steps in progress... Please wait.")
	}
}

# Build steps
my $ret = build();

unless($ret) {
	unless ($main::buildonly) {
		# Install steps
		require "$FindBin::Bin/engine/setup/imscp-setup-methods.pl";
		$ret = install();
	} else {
		my $msg = <<EOF;

\\Z4\\ZuBuild Steps Successful\\Zn

Please run the following commands from your console:
EOF

		if (-f '/etc/ispcp/ispcp.conf' || -f '/usr/local/etc/ispcp/ispcp.conf') {
			$msg .= <<EOF

	# cp -fR $main::{'INST_PREF'}/* /
	# cd $main::imscpConfig{'ROOT_DIR'}/engine/setup
	# perl imscp-migrate-from-ispcp
	# perl imscp-setup
EOF
		} else {
			$msg .= <<EOF;

	# rm -fR $main::imscpConfig{'ROOT_DIR'}/{daemon,engine,gui}
	# cp -fR $main::{'INST_PREF'}/* /
	# rm -fR $main::{'INST_PREF'}
	# perl $main::imscpConfig{'ROOT_DIR'}/engine/setup/imscp-setup --debug
EOF
		}

		$msg .= <<EOF;

If you get no error, all went good; if you get one, look at http://forum.i-mscp.net to solve the problem.

Thank you for choosing i-MSCP.
EOF

		iMSCP::Dialog->getInstance()->msgbox($msg);
	}
}

END
{
	my $logdir = $main::imscpConfig{'LOG_DIR'} || '/tmp';
	iMSCP::Dir->new('dirname' => $logdir)->make() unless -d $logdir;
}

exit $ret;
