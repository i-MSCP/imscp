#!/usr/bin/perl

=head1 NAME

 iMSCP::Debug - Debug library

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2016 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib $FindBin::Bin, "$FindBin::Bin/engine/PerlLib", "$FindBin::Bin/engine/PerlVendor";
use iMSCP::Debug;
use iMSCP::Requirements;
use iMSCP::Dialog;
use iMSCP::Getopt;
use File::Basename;
use autoinstaller::Functions qw/loadConfig build install/;

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

newDebug('imscp-autoinstall.log');

# Set backend mode
# Init variable that holds questions
  %main::questions = () unless %main::questions;
{
	no warnings qw/once/;
	$main::execmode = 'setup';
	%main::questions = ();
}

# Load config
loadConfig();

# Ensure that this script is run by root user
iMSCP::Requirements->new()->user();

# Initialize command line options
$main::buildonly = 0;
$main::forcereinstall = 0;
$main::skippackages = 0;

# Parse autoinstaller options
iMSCP::Getopt->parse(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {
 -b,    --build-only            Process build steps only.
 -f,    --force-reinstall       Force reinstallation of distro packages.
 -s,    --skip-distro-packages  Do not install/update distro packages.},
 'build-only|b' => \$main::buildonly,
 'force-reinstall|f' => \$main::forcereinstall,
 'skip-distro-packages|s' => \$main::skippackages
);

# Set debug and verbose mode
setDebug(iMSCP::Getopt->debug);

# Getting reconfigure option value
$main::reconfigure = iMSCP::Getopt->reconfigure;

# Handle preseed option
if(iMSCP::Getopt->preseed) {
	require iMSCP::Getopt->preseed;
	# The preseed option supersede the reconfigure option
	iMSCP::Getopt->reconfigure('none');
	$main::reconfigure = 'none';
	iMSCP::Getopt->noprompt(1);
}

# Handle the listener option
require iMSCP::Getopt->listener if iMSCP::Getopt->listener;

# Must be set after preseed option
setVerbose(iMSCP::Getopt->noprompt && iMSCP::Getopt->verbose);

# Handle noprompt option
$main::noprompt = iMSCP::Getopt->noprompt;
if($main::noprompt) {
	debugRegisterCallBack(sub {
		if($?) { # We exit with status 5 from iMSCP::Dialog in noninteractive mode
			if($? == 5) {
				if(iMSCP::Getopt->preseed) {
					print STDERR output('Missing or bad entry found in your preseed file.', 'fatal');
				} else {
					print STDERR output('Missing or bad entry found in configuration file.', 'fatal');
				}
			}
		} else {
			unless($main::buildonly) {
				print STDOUT output('i-MSCP has been successfully installed/updated.', 'ok');
			} else {
				print STDOUT output('i-MSCP has been successfully built.', 'ok');
			}
		}
	});

	unless($main::buildonly) {
		print STDOUT output('Installation in progress... Please wait.', 'info');
	} else {
		print STDOUT output('Build steps in progress... Please wait.', 'info')
	}
} elsif(!iMSCP::Getopt->preseed) {
	system('clear');
}

# Build steps
my $ret = build();

unless($ret) {
	unless ($main::buildonly) {
		# Install steps
		require "$FindBin::Bin/engine/setup/imscp-setup-methods.pl";
		$ret = install();
	} else {
		my $msg = <<EOF;

\\Z4\\ZuBuild Steps Successful\\Zn

Please run the following commands from your console:
EOF

		if (-f '/etc/ispcp/ispcp.conf' || -f '/usr/local/etc/ispcp/ispcp.conf') {
			$msg .= <<EOF

	# cp -fR $main::{'INST_PREF'}/* /
	# cd $main::imscpConfig{'ROOT_DIR'}/engine/setup
	# perl imscp-migrate-from-ispcp
	# perl imscp-setup
EOF
		} else {
			$msg .= <<EOF;

	# rm -fR $main::imscpConfig{'ROOT_DIR'}/{daemon,engine,gui}
	# cp -fR $main::{'INST_PREF'}/* /
	# rm -fR $main::{'INST_PREF'}
	# perl $main::imscpConfig{'ROOT_DIR'}/engine/setup/imscp-setup -d
EOF
		}

		$msg .= <<EOF;

For any problem, have a look at http://forum.i-mscp.net

Thank you for choosing i-MSCP.
EOF

		iMSCP::Dialog->getInstance()->msgbox($msg);
	}
}

exit $ret;
