#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2015 by i-MSCP | http://i-mscp.net
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";

use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::Database;

# Turn off localisation features to force any command output to be in english
$ENV{'LANG'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

newDebug('imscp-srv-traff.log');

silent(1);

umask(027);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-srv-traff.lock', 'nowait');
$bootstrapper->boot({ 'norequirements' => 'yes', 'nolock' => 'yes', 'config_readonly' => 'yes' });

sub run
{
	if ($main::imscpConfig{'CMD_IPTABLES'} ne 'no') {
		my ($inboundTraffic, $outboundTraffic, $stdout, $stderr);

		# Getting inbound and outbound traffic data

		my $rs = execute("$main::imscpConfig{'CMD_IPTABLES'} -nvxL IMSCP_INPUT", \$inboundTraffic, \$stderr);
		debug($inboundTraffic) if $inboundTraffic;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;

		$rs = execute("$main::imscpConfig{'CMD_IPTABLES'} -nvxL IMSCP_OUTPUT", \$outboundTraffic, \$stderr);
		debug($outboundTraffic) if $outboundTraffic;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;

		# Getting inbound traffic per service
		my ($smtpIn, $pop3ImapIn, $httpIn, $allIn) = (0, 0, 0, 0);
		_parseTraffiData($inboundTraffic, \$smtpIn, \$pop3ImapIn, \$httpIn, \$allIn);

		# Getting outbound traffic per service
		my ($smtpOut, $pop3ImapOut, $httpOut, $allOut) = (0, 0, 0, 0);
		_parseTraffiData($outboundTraffic, \$smtpOut, \$pop3ImapOut, \$httpOut, \$allOut);

		# Updating traffic data in database

		# Floor down for the last half'n hour to make timestamps in server_traffic and domain_traffic identical
		my $timestamp = time;
		$timestamp -= ($timestamp % 1800);

		$rs = iMSCP::Database->factory()->doQuery(
			'dummy',
			'
				INSERT INTO `server_traffic` (
					traff_time, bytes_in, bytes_out, bytes_mail_in, bytes_mail_out, bytes_pop_in, bytes_pop_out,
					bytes_web_in, bytes_web_out
				) VALUES (
					?, ?, ?, ?, ?, ?, ?, ?, ?
				)
			',
			$timestamp, $allIn, $allOut, $smtpIn, $smtpOut, $pop3ImapIn, $pop3ImapOut, $httpIn, $httpOut
		);
		unless(ref $rs eq 'HASH') {
			error($rs);
			return 1;
		}

		# Reset traffic data for next run

		$rs = execute("$main::imscpConfig{'CMD_IPTABLES'} -Z IMSCP_INPUT", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;

		$rs |= execute("$main::imscpConfig{'CMD_IPTABLES'} -Z IMSCP_OUTPUT", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;

		$rs;
	} else {
		0;
	}
}

sub _parseTraffiData($$$$$)
{
	my ($trafficData, $smtp, $pop3Imap, $http, $all) = @_;

	while($trafficData =~ /^\s+\d+\s+(\d+).*?(?:(?:dpt|spt):(\d+))?$/gm) {
		my $bytes = $1;
		my $port = $2 // 0;

		if($port > 0) {
			$$smtp += $bytes if $port == 587 || $port == 25 || $port == 465;
			$$pop3Imap += $bytes if $port == 110 || $port == 995 || $port == 143 || $port == 993;
			$$http += $bytes if $port == 80 || $port == 443;
		} else {
			$$all = $bytes;
		}
	}

	0;
}

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-srv-traff.lock');
exit $rs;
