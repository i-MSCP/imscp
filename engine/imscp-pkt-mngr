#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by internet Multi Server Control Panel
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is "i-MSCP - Multi Server Control Panel".
#
# The Initial Developer of the Original Code is i-MSCP Team.
# Portions created by Initial Developer are Copyright (C) 2010 by
# i-MSCP - internet Multi Server Control Panel. All Rights Reserved

use FindBin;
use lib $FindBin::Bin;
require 'imscp_common_code.pl';

use strict;
use XML::Parser;
use warnings;
use JSON;
use MIME::Base64 qw/ decode_base64 /;
use POSIX qw /locale_h /;

setlocale(LC_MESSAGES, "C.UTF-8");

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

defined $ARGV[0] or die( 'Expects a base64 encoded string containg JSON data as first argument' );

# Decoding data which pushed from another script
my (
    $sw_software_id, $sw_reseller_id, $sw_software_archive, $sw_status, $sw_software_depot
) = @{decode_json( decode_base64( $ARGV[0] ))};

sub pkt_mngr_start_up
{
    push_el( \@main::el, 'pkt_mngr_start_up()', 'Starting package manager...' );

    my $rs = 0;

    # Let's clear Execution Logs, if any.
    if ( -f $main::imscp_pkt_mngr_el ) {
        $rs = del_file( $main::imscp_pkt_mngr_el );
        return $rs if $rs;
    }

    # sql check;
    ( $rs ) = doSQL( 'SELECT `software_id` FROM `web_software` LIMIT 1' );

    $rs;
}

sub pkt_mngr_engine
{
    push_el( \@main::el, 'pkt_mngr_engine()', 'Starting software package engine...' );

    my ($rs);
    my $sw_src_path = '';
    my $gui_software_dir = $main::cfg{'GUI_APS_DIR'};
    my $gui_softwaredepot_dir = $main::cfg{'GUI_APS_DEPOT_DIR'};
    my $software_tmp_dir = $main::cfg{'SOFTWARE_TMP_DIR'};

    if ( $sw_software_depot eq 'yes' ) {
        $sw_src_path = "$gui_softwaredepot_dir/$sw_software_archive";
    } else {
        $sw_src_path = "$gui_software_dir/$sw_reseller_id/$sw_software_archive";
    }

    my $sw_tmp_path = "$software_tmp_dir/sw-$sw_software_archive-$sw_software_id";
    my $sw_install_xml_file = "$software_tmp_dir/sw-$sw_software_archive-$sw_software_id/xml/install.xml";
    my $sw_uninstall_xml_file = "$software_tmp_dir/sw-$sw_software_archive-$sw_software_id/xml/uninstall.xml";

    if ( $sw_status eq 'toadd' ) {
        my @entry = (
            $sw_software_id, $sw_software_archive, $sw_src_path, $sw_tmp_path, $sw_install_xml_file,
            $sw_uninstall_xml_file, $sw_reseller_id
        );
        $rs = _pkt_add_data( @entry );
        return $rs if $rs;
    }

    push_el( \@main::el, 'pkt_mngr_engine()', 'Ending software package engine...' );

    0;
}

sub pkt_mngr_shut_down
{
    push_el( \@main::el, 'pkt_mngr_shut_down()', 'Ending package manager...' );

    0;
}

sub _pkt_add_data
{
    push_el( \@main::el, '_pkt_add_data()', 'Starting add software package...' );

    my (
        $sw_software_id, $sw_software_archive, $sw_src_path, $sw_tmp_path, $sw_install_xml_file, $sw_uninstall_xml_file,
        $sw_reseller_id
    ) = @_;

    my (
        $rs, $rdata, $rdata2, $userdata, $sql, $sw_count_swdepot, $sw_count_res, $existing_swdepotid, $existing_swrestid,
        @cmd
    );

    our @allowed_languages = qw(
        az_AZ eu_ES bg_BG ca_ES zh_CN zh_HK cs_CZ da_DK nl_NL en_GB fi_FI fr_FR gl_ES de_DE hu_HU it_IT ja_JP nb_NO pl_PL
        pt_BR pt_BR ro_RO ru_RU sk_SK es_AR es_ES sv_SE th_TH tr_TR uk_UA'
        );

    our ($tag, $data) = '';
    @cmd = ( 'mkdir', '-p', sys_command_escape_arg( $sw_tmp_path ) );
    $rs = sys_command_rs( "@cmd" );
    return $rs if $rs;

    unless ( chdir( $sw_tmp_path ) ) {
        push_el( \@main::el, '_pkt_add_data()', sprintf( "[ERROR] Couldn't change dir to %s", $sw_tmp_path ));
        return 1;
    }

    @cmd = (
        'cp', '-f',
        sys_command_escape_arg( "$sw_src_path-$sw_software_id.tar.gz" ),
        sys_command_escape_arg( $sw_tmp_path ),
    );

    $rs = sys_command_rs( "@cmd" );
    return $rs if $rs;

    @cmd = ( 'tar', '-xzf', sys_command_escape_arg( "$sw_src_path-$sw_software_id.tar.gz" ) );
    $rs = sys_command_rs( "@cmd" );
    return $rs if $rs;

    if ( -f $sw_install_xml_file && -f $sw_uninstall_xml_file && -d "$sw_tmp_path/sql" && -d "$sw_tmp_path/web" ) {
        our %INSTALL_DATA = (
            software_installtype => '',
            software_installfile => '',
            software_name        => '',
            software_version     => '',
            software_language    => '',
            software_type        => '',
            software_db          => '',
            software_prefix      => '',
            software_link        => '',
            software_desc        => ''
        );

        my $parser = new XML::Parser ();
        $parser->setHandlers(
            Start => \&startElement,
            End   => \&endElement,
            Char  => \&characterData
        );

        $parser->parsefile ( $sw_install_xml_file );

        sub startElement
        {
            my ($parseinst, $element, %attrs) = @_;

            SWITCH: {
            if ( $element eq 'software_installtype' ) {
                $tag = 'software_installtype';
                last SWITCH;
            }

            if ( $element eq 'software_installfile' ) {
                $tag = 'software_installfile';
                last SWITCH;
            }

            if ( $element eq 'software_name' ) {
                $tag = 'software_name';
                last SWITCH;
            }

            if ( $element eq 'software_version' ) {
                $tag = 'software_version';
                last SWITCH;
            }

            if ( $element eq 'software_language' ) {
                $tag = 'software_language';
                last SWITCH;
            }

            if ( $element eq 'software_type' ) {
                $tag = 'software_type';
                last SWITCH;
            }

            if ( $element eq 'software_db' ) {
                $tag = 'software_db';
                last SWITCH;
            }

            if ( $element eq 'software_prefix' ) {
                $tag = 'software_prefix';
                last SWITCH;
            }

            if ( $element eq 'software_link' ) {
                $tag = 'software_link';
                last SWITCH;
            }

            if ( $element eq 'software_desc' ) {
                $tag = 'software_desc';
                last SWITCH;
            }
        }
        }

        sub endElement
        { my ( $parseinst, $element ) = @_; }
        sub characterData
        {
            my ( $parseinst, $data ) = @_;

            if (
                ( $tag eq 'software_installtype' ) || ( $tag eq 'software_installfile' ) || ( $tag eq 'software_name' ) ||
                    ( $tag eq 'software_version' ) || ( $tag eq 'software_language' ) || ( $tag eq 'software_type' ) ||
                    ( $tag eq 'software_db' )
            ) {
                $data =~ s/\n|\t//g;

                if ( $data ne '' ) {
                    $INSTALL_DATA{$tag} .= $data;
                }
            } elsif ( ( $tag eq 'software_prefix' ) || ( $tag eq 'software_link' ) || ( $tag eq 'software_desc' ) ) {
                $data =~ s/\n|\t//g;

                if ( $data ne "" ) {
                    $INSTALL_DATA{$tag} .= $data;
                }
            }
        }

        if (
            $INSTALL_DATA{'software_installtype'} ne '' && $INSTALL_DATA{'software_installfile'} ne '' &&
                -f "$sw_tmp_path/$INSTALL_DATA{'software_installfile'}" && $INSTALL_DATA{'software_name'} ne '' &&
                $INSTALL_DATA{'software_version'} ne '' && $INSTALL_DATA{'software_language'} ne '' &&
                $INSTALL_DATA{'software_type'} ne '' && $INSTALL_DATA{'software_db'} ne '' &&
                $INSTALL_DATA{'software_prefix'} ne '' && $INSTALL_DATA{'software_link'} ne '' &&
                $INSTALL_DATA{'software_desc'} ne '' && grep($_ eq $INSTALL_DATA{'software_language'}, @allowed_languages)
        ) {
            if ( $INSTALL_DATA{'software_db'} ne 'true' ) {
                $INSTALL_DATA{'software_db'} = '0';
                $INSTALL_DATA{'software_prefix'} = 'not_required';
            } else {
                $INSTALL_DATA{'software_db'} = '1';
            }
            $sql = "SELECT `admin_type` FROM `admin` WHERE `admin_id` = $sw_reseller_id";

            ( $rs, $userdata ) = doSQL( $sql );
            return $rs if $rs;

            my $userstatus = @{$userdata}[0];

            if ( @{$userstatus}[0] eq 'admin' ) {
                $sql = "
					SELECT
						`software_id`
					FROM
						`web_software`
					WHERE
					    `software_installtype` = '$INSTALL_DATA{'software_installtype'}'
					AND
						`software_name` = '$INSTALL_DATA{'software_name'}'
					AND
						`software_version` = '$INSTALL_DATA{'software_version'}'
					AND
						`software_language` = '$INSTALL_DATA{'software_language'}'
					AND
						`software_depot` = 'no'
				";
            } else {
                $sql = "
					SELECT
						`software_id`
					FROM
						`web_software`
					WHERE
					    `software_installtype` = '$INSTALL_DATA{'software_installtype'}'
					AND
						`software_name` = '$INSTALL_DATA{'software_name'}'
					AND
						`software_version` = '$INSTALL_DATA{'software_version'}'
					AND
						`software_language` = '$INSTALL_DATA{'software_language'}'
					AND
						`reseller_id` = $sw_reseller_id
					AND
						`software_depot` = 'no'
				";
            }
            ( $rs, $rdata ) = doSQL( $sql );
            return $rs if $rs;

            $sw_count_res = @{$rdata};
            $sql = "
				SELECT
					`software_id`
				FROM
					`web_software`
				WHERE
				    `software_installtype` = '$INSTALL_DATA{'software_installtype'}'
				AND
					`software_name` = '$INSTALL_DATA{'software_name'}'
				AND
					`software_version` = '$INSTALL_DATA{'software_version'}'
				AND
					`software_language` = '$INSTALL_DATA{'software_language'}'
				AND
					`software_master_id` = 0
				AND
					`software_depot` = 'yes'
			";
            ( $rs, $rdata2 ) = doSQL( $sql );
            return $rs if $rs;

            $sw_count_swdepot = @{$rdata2};

            if ( $sw_count_res || $sw_count_swdepot ) {
                if ( $sw_count_res ) {
                    $existing_swrestid = @{$rdata}[0];
                    $sql = "
						UPDATE
							`web_software`
						SET
							`software_status` = 'double_res_" . @{$existing_swrestid}[0] . "'
						WHERE
							`software_id` = $sw_software_id
					";
                } elsif ( $sw_count_swdepot ) {
                    $existing_swdepotid = @{$rdata2}[0];
                    $sql = "
						UPDATE
							`web_software`
						SET
							`software_status` = 'double_depot_" . @{$existing_swdepotid}[0] . "'
						WHERE
							`software_id` = $sw_software_id
					";
                }
                ( $rs ) = doSQL( $sql );
                return $rs if $rs;
            } else {
                $INSTALL_DATA{'software_desc'} =~ s/(["'*])/\\$1/g;

                $sql = "
					UPDATE
						`web_software`
					SET
					    `software_installtype` = '$INSTALL_DATA{'software_installtype'}',
						`software_name` = '$INSTALL_DATA{'software_name'}',
						`software_version` = '$INSTALL_DATA{'software_version'}',
						`software_language` = '$INSTALL_DATA{'software_language'}',
						`software_type` = '$INSTALL_DATA{'software_type'}',
						`software_db` = '$INSTALL_DATA{'software_db'}',
						`software_installfile` = '$INSTALL_DATA{'software_installfile'}',
						`software_prefix` = '$INSTALL_DATA{'software_prefix'}',
						`software_link` = '$INSTALL_DATA{'software_link'}',
						`software_desc` = '$INSTALL_DATA{'software_desc'}',
						`software_status` = 'ready'
					WHERE
						`software_id` = $sw_software_id
				";
                $rs = doSQL( $sql );
            }

            @cmd = ( 'rm', '-fR', sys_command_escape_arg( $sw_tmp_path ) );
            $rs = sys_command_rs( "@cmd" );
            return $rs if $rs;
        } else {
            $sql = "
				UPDATE
					`web_software`
				SET
					`software_status` = 'todelete'
				WHERE
					`software_id` = $sw_software_id
			";
            $rs = doSQL( $sql );
            return $rs if $rs;

            @cmd = ( 'rm', '-fR', sys_command_escape_arg( $sw_tmp_path ) );
            $rs = sys_command_rs( "@cmd" );
            return $rs if $rs;

            $rs = 11; # No Data found
        }
    } else {
        $sql = "
			UPDATE
				`web_software`
			SET
				`software_status` = 'todelete'
			WHERE
				`software_id` = $sw_software_id
		";
        ( $rs ) = doSQL( $sql );
        return $rs if $rs;

        @cmd = ( 'rm', '-fR', sys_command_escape_arg( $sw_tmp_path ) );
        $rs = sys_command_rs( "@cmd" );
        return $rs if $rs;

        $rs = 10; # No XML-File
    }

    return $rs if $rs;

    push_el( \@main::el, '_pkt_add_data()', 'Ending add software package...' );

    0;
}


# Main

my $rs = pkt_mngr_start_up();

if ( $rs ) {
    dump_el( \@main::el, $main::imscp_pkt_mngr_el );
    pkt_mngr_shut_down();
    exit 1;
}

$rs = pkt_mngr_engine();

if ( $rs ) {
    dump_el( \@main::el, $main::imscp_pkt_mngr_el );
    pkt_mngr_shut_down();
    exit 1;
}

$rs = pkt_mngr_shut_down();

if ( $rs ) {
    dump_el( \@main::el, $main::imscp_pkt_mngr_el );
    exit 1;
}

exit 0;
