#!/usr/bin/perl
#
# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by internet Multi Server Control Panel
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is i-MSCP - Multi Server Control Panel.
#
#  The Initial Developer of the Original Code is i-MSCP Team.
#  Portions created by Initial Developer are Copyright (C) 2010
#  i-MSCP - internet Multi Server Control Panel. All Rights Reserved.
#
# Copyright: (C) 2010-2015 by i-MSCP | http://i-mscp.net
# Author: Sacha Bay <sascha.bay@i-mscp.net>
# Project Site: http://i-mscp.net
# License http://www.mozilla.org/MPL/ MPL 1.1
#

use FindBin;
use lib "$FindBin::Bin";
require 'imscp_common_code.pl';

use strict;
use XML::Parser;
use warnings;
use JSON;

# Turn off localisation features to force any command output to be in english
$ENV{'LANG'} = 'C';

# Decoding received data
my (
	$sw_domain_id, $sw_software_id, $sw_path, $sw_software_prefix, $sw_database, $sw_database_user, $sw_database_tmp_pwd,
	$sw_install_username, $sw_install_password, $sw_install_email, $sw_software_status, $sw_software_depot,
	$sw_software_master_id, $sw_aliasdomain_id, $sw_subdomain_id, $sw_aliassubdomain_id
) = @{decode_json(decode_base64($ARGV[0]))};

sub sw_mngr_start_up
{
	push_el(\@main::el, 'sw_mngr_start_up()', 'Starting software manager...');

	my $rs = 0;

	# Let's clear Execution Logs, if any.
	if (-f $main::imscp_sw_mngr_el) {
		$rs = del_file($main::imscp_sw_mngr_el);
		return $rs if $rs;
	}

	# sql check
	($rs) = doSQL('SELECT `domain_id` FROM `domain` LIMIT 1');

	$rs;
}

sub sw_mngr_engine
{
	push_el(\@main::el, 'sw_mngr_engine()', 'Starting software manager engine...');

	my ($rs, $rows, $rdata, $rowsdomainname);

	my $sql = "
		SELECT
			`reseller_id`, `software_db`, `software_archive`, `software_installfile`, `software_depot`,
			`software_master_id`
		FROM
			`web_software`
		WHERE
			`software_id` = $sw_software_id
	";
	($rs, $rows) = doSQL($sql);
	return $rs if $rs;

	$rows = @$rows[0];
	my (
		$sw_reseller_id, $sw_software_db, $sw_software_archive, $sw_software_installfile, $sw_software_depot,
		$sw_software_master_id
	) = (@$rows[0], @$rows[1], @$rows[2], @$rows[3], @$rows[4], @$rows[5]);

	my $query = "
		SELECT
			`admin_sys_uid`, `admin_sys_gid`, `domain_name`
		FROM
			`admin`
		INNER JOIN
			`domain` ON(`domain_admin_id` = `admin_id`)
		WHERE
			`domain_id` = $sw_domain_id
	";
	($rs, $rows) = doSQL($query);
	return $rs if $rs;

	($rs, $rows) = doSQL($query);
	return $rs if $rs;

	$rows = @$rows[0];

	my ($uid, $gid,  $dmn_name) = (@$rows[0], @$rows[1], @$rows[2]);
	my $querydomainname;
	my $domain_name = '';

	if(($sw_aliasdomain_id + $sw_subdomain_id + $sw_aliassubdomain_id) > 0) {
		if($sw_aliasdomain_id) {
			$querydomainname = "
				SELECT
					`alias_name`
				FROM
					`domain_aliasses`
				WHERE
					`alias_id` = $sw_aliasdomain_id
			";
		} elsif($sw_subdomain_id) {
			$querydomainname = "
				SELECT
					`subdomain`.`subdomain_name`, `domain`.`domain_name`
				FROM
					`subdomain`
				JOIN
					`domain`
				ON
					`subdomain`.`domain_id` = `domain`.`domain_id`
				WHERE
					`subdomain`.`subdomain_id` = $sw_subdomain_id
			";
		} elsif($sw_aliassubdomain_id) {
			$querydomainname = "
				SELECT
					`subdomain_alias`.`subdomain_alias_name`, `domain_aliasses`.`alias_name`
				FROM
					`subdomain_alias`
				JOIN
					`domain_aliasses`
				ON
					`subdomain_alias`.`alias_id` = `domain_aliasses`.`alias_id`
				WHERE
					`subdomain_alias`.`subdomain_alias_id` = $sw_aliassubdomain_id
			";
		}
		($rs, $rowsdomainname) = doSQL($querydomainname);
		return $rs if $rs;

		$rowsdomainname = @$rowsdomainname[0];
		my ($domain_name_sub, $domain_name_master) = (@$rowsdomainname[0], @$rowsdomainname[1]);
		$domain_name = $domain_name_sub . '.' . $domain_name_master;
	} else {
		$domain_name = $dmn_name;
	}

	my $sw_src_path = '';
	my $gui_software_dir = $main::cfg{'GUI_APS_DIR'};
	my $gui_software_depot_dir = $main::cfg{'GUI_APS_DEPOT_DIR'};
	my $apache_www_dir = $main::cfg{'USER_WEB_DIR'};
	my $software_tmp_dir = $main::cfg{'SOFTWARE_TMP_DIR'};

	if ($sw_software_depot eq 'yes') {
		$sw_src_path = "$gui_software_depot_dir/$sw_software_archive";
	} else {
		$sw_src_path = "$gui_software_dir/$sw_reseller_id/$sw_software_archive";
	}

	my $sw_tmp_path = "$software_tmp_dir/sw-$sw_domain_id-$sw_software_id";
	my $sw_dest_path = "$apache_www_dir/$dmn_name$sw_path";

	if ($sw_software_status eq 'toadd') {
		my @entry = (
			$sw_software_archive, $sw_software_installfile, $sw_software_db, $sw_software_prefix, $sw_database,
			$sw_database_user, $sw_database_tmp_pwd, $sw_install_username, $sw_install_password, $sw_install_email,
			$domain_name, $gid, $uid, $sw_src_path, $sw_tmp_path, $sw_dest_path, $sw_path
		);
		$rs = _sw_add_data(@entry);

		if (!$rs) {
			$sql = "
				UPDATE
					`web_software_inst`
				SET
					`software_status` = 'ok'
				WHERE
					`software_id` = $sw_software_id
				AND
					`domain_id` = $sw_domain_id
			";
			($rs, $rdata) = doSQL($sql);
			return $rs if $rs;
		}
	} elsif ($sw_software_status eq 'todelete') {
		my @entry = (
			$sw_software_archive, $sw_software_installfile, $sw_software_db, $sw_software_prefix, $sw_database,
			$sw_database_user, $sw_database_tmp_pwd, $sw_install_username, $sw_install_password, $sw_install_email,
			$domain_name, $gid, $uid, $sw_src_path, $sw_tmp_path, $sw_dest_path, $sw_path
		);
		$rs = _sw_del_data(@entry);

		if (!$rs) {
			$sql = "
				DELETE FROM
					`web_software_inst`
				WHERE
					`software_id` = $sw_software_id
				AND
					`domain_id` = $sw_domain_id
			";
			($rs, $rdata) = doSQL($sql);
			return $rs if ($rs != 0);
		}
	}

	push_el(\@main::el, 'sw_mngr_engine()', 'Ending software manager engine...');

	0;
}

sub sw_mngr_shut_down
{
	push_el(\@main::el, 'sw_mngr_shut_down()', 'Ending software manager...');

	0;
}

sub _sw_add_data
{
	push_el(\@main::el, '_sw_add_data()', 'Starting adding software...');

	my (
		$sw_software_archive, $sw_software_installfile, $sw_software_db, $sw_software_prefix, $sw_database,
		$sw_database_user, $sw_database_tmp_pwd, $sw_install_username, $sw_install_password, $sw_install_email,
		$domain_name, $gid, $uid, $sw_src_path, $sw_tmp_path, $sw_dest_path, $sw_path) = @_;

	my $rs = 0;

	# Creating software destdir directory if it doesn't already exists
	unless(-d $sw_dest_path) {
		$rs = sys_command_rs("$main::cfg{'CMD_MKDIR'} -p $sw_dest_path");
		return $rs if $rs;

		$rs = sys_command_rs("$main::cfg{'CMD_CHOWN'} $uid:$gid $sw_dest_path");
		return $rs if $rs;
	}

	if (-f "$sw_dest_path/index.html" || -d "$sw_dest_path/images") {
		if (-f "$sw_dest_path/index.html") {
			$rs = sys_command_rs("$main::cfg{'CMD_MV'} $sw_dest_path/index.html $sw_dest_path/index.installer_bak");
			return $rs if $rs;
		}

		if (-d "$sw_dest_path/images"){
			$rs = sys_command_rs("$main::cfg{'CMD_MV'} $sw_dest_path/images $sw_dest_path/images.installer_bak");
			return $rs if $rs;
		}
	}

	$rs = sys_command_rs("$main::cfg{'CMD_MKDIR'} -p $sw_tmp_path");

	# Change directory to software temporary directory
	chdir ($sw_tmp_path);

	if($sw_software_depot eq 'yes') {
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -f $sw_src_path-$sw_software_master_id.tar.gz $sw_tmp_path");
		return $rs if $rs;

		$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_master_id.tar.gz");
		return $rs if $rs;
	} else {
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -f $sw_src_path-$sw_software_id.tar.gz $sw_tmp_path");
		return $rs if $rs;

		$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_id.tar.gz");
		return $rs if $rs;
	}

	$rs = sys_command_rs("$main::cfg{'CMD_CP'} -fpr $sw_tmp_path/web/. $sw_dest_path");
	return $rs if $rs;

	my $check_xargs = sys_command_rs("echo 'test' | xargs -r >/dev/null 2>&1;");
	my $XARGSVAR;

	if($check_xargs == 0) {
		$XARGSVAR = 'xargs -r';
	} else {
		$XARGSVAR = 'xargs';
	}

	$rs = sys_command_rs("find $sw_dest_path/ -type d -print0 | $XARGSVAR -0 $main::cfg{'CMD_CHMOD'} 0755");
	return $rs if $rs;

	$rs = sys_command_rs("find $sw_dest_path/ -type f -print0 | $XARGSVAR -0 $main::cfg{'CMD_CHMOD'} 0644");
	return $rs if $rs;

	$rs = sys_command_rs("$main::cfg{'CMD_CHOWN'} -R $uid:$gid $sw_dest_path/*");
	return $rs if $rs;

	# Encoding data to send
	# TODO, we should not use comma as delimiter here. We should encode them to JSON in place.
	# We cannot do this right now without updating software all packages. Thus, comma character usage in user input
	# has been disallowed in GUI (temporary fix)
	my $imscp_software_install_pushstring = encode_base64(
		"install,$sw_software_db,$sw_software_prefix,$sw_database,$sw_database_user,$sw_database_tmp_pwd," .
		"$sw_install_username,$sw_install_password,$sw_install_email,$domain_name,$sw_dest_path,$sw_path"
	);

	$rs = sys_command_rs("perl $sw_tmp_path/$sw_software_installfile '$imscp_software_install_pushstring'");
	return $rs if $rs;

	$rs = sys_command_rs("$main::cfg{'CMD_CHOWN'} -R $uid:$gid $sw_dest_path");
	return $rs if $rs;

	$rs = sys_command_rs("$main::cfg{'CMD_RM'} -fR $sw_tmp_path");
	return $rs if $rs;

	push_el(\@main::el, '_sw_add_data()', 'Ending adding software...');

	0;
}

sub _sw_del_data
{
	push_el(\@main::el, '_sw_del_data()', 'Starting deleting software...');

	my (
		$sw_software_archive, $sw_software_installfile, $sw_software_db, $sw_software_prefix, $sw_database,
		$sw_database_user, $sw_database_tmp_pwd, $sw_install_username, $sw_install_password, $sw_install_email,
		$domain_name, $gid, $uid, $sw_src_path, $sw_tmp_path, $sw_dest_path
	) = @_;
	my $sw_uninstall_xml_file = "$sw_tmp_path/xml/uninstall.xml";

	our ($tag, $data) = '';
	our %UNINSTALL_DATA = (
		software_deldirs => '',
		software_delfiles => ''
	);

	# Unpack Package
	my $rs = sys_command_rs("$main::cfg{'CMD_MKDIR'} -p $sw_tmp_path");
	return $rs if $rs;

	chdir ($sw_tmp_path);

	if($sw_software_depot eq 'yes'){
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -f $sw_src_path-$sw_software_master_id.tar.gz $sw_tmp_path");
		return $rs if $rs;

		$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_master_id.tar.gz");
		return $rs if $rs;
	} else{
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} -f $sw_src_path-$sw_software_id.tar.gz $sw_tmp_path");
		return $rs if $rs;

		$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_id.tar.gz");
		return $rs if $rs;
	}

	my $parser = new XML::Parser ();
	$parser->setHandlers (
		Start => \&startElement,
		End => \&endElement,
		Char=> \&characterData
	);

	$parser->parsefile ($sw_uninstall_xml_file);

	sub startElement {
		my ($parseinst, $element, %attrs) = @_;

		SWITCH: {
			if ($element eq 'software_deldirs') {
				$tag = "software_deldirs";
				last SWITCH;
			}

			if ($element eq 'software_delfiles') {
				$tag = "software_delfiles";
				last SWITCH;
			}
		}
	}

	sub endElement { my ($parseinst, $element) = @_; }

	sub characterData {
		my( $parseinst, $data ) = @_;

		if ($tag eq 'software_deldirs' || $tag eq 'software_delfiles') {
			$data =~ s/\n|\t//g;

			if ($data ne '') {
				$UNINSTALL_DATA{$tag} .= $data;
			}
		}
	}

	if ($UNINSTALL_DATA{'software_deldirs'} ne '' && $UNINSTALL_DATA{'software_delfiles'} ne '') {
		my @uninstalldirs = split(',', $UNINSTALL_DATA{'software_deldirs'});
		my @uninstallfiles = split(',', $UNINSTALL_DATA{'software_delfiles'});

		for (@uninstalldirs) {
			$rs = sys_command_rs("$main::cfg{'CMD_RM'} -fR $sw_dest_path/$_");
			return $rs if $rs;
		}

		for (@uninstallfiles) {
			$rs = sys_command_rs("$main::cfg{'CMD_RM'} -fR $sw_dest_path/$_");
			return $rs if $rs;
		}

		# Encoding data to send
		my $imscp_software_uninstall_pushstring = encode_base64(
			"uninstall,$sw_software_db,$sw_software_prefix,$sw_database,$sw_database_user,$sw_database_tmp_pwd," .
			"$sw_install_username,$sw_install_password,$sw_install_email,$domain_name,$sw_dest_path,$sw_path"
		);

		$rs = sys_command_rs("perl $sw_tmp_path/$sw_software_installfile '$imscp_software_uninstall_pushstring'");
		return $rs if $rs;

		$rs = sys_command_rs("$main::cfg{'CMD_RM'} -fR $sw_tmp_path");
		return $rs if $rs;

		if (-f "$sw_dest_path/index.installer_bak" || -d "$sw_dest_path/images.installer_bak") {
			if (-f "$sw_dest_path/index.installer_bak") {
				$rs = sys_command_rs("$main::cfg{'CMD_MV'} $sw_dest_path/index.installer_bak $sw_dest_path/index.html");
				return $rs if $rs;
			}

			if (-d "$sw_dest_path/images.installer_bak") {
				$rs = sys_command_rs("$main::cfg{'CMD_MV'} $sw_dest_path/images.installer_bak $sw_dest_path/images");
				return $rs if $rs;
			}

			$rs = sys_command_rs("$main::cfg{'CMD_CHOWN'} -R $uid:$gid $sw_dest_path/*");
			return $rs if $rs;
		}
	}

	push_el(\@main::el, '_sw_del_data()', 'Ending deleting software...');

	0;
}

my $rs = sw_mngr_start_up();

if ($rs) {
	dump_el(\@main::el, $main::imscp_sw_mngr_el);
	sw_mngr_shut_down();
	exit 1;
}

$rs = sw_mngr_engine();

if ($rs) {
	dump_el(\@main::el, $main::imscp_sw_mngr_el);
	sw_mngr_shut_down();
	exit 1;
}

$rs = sw_mngr_shut_down();

if ($rs) {
	dump_el(\@main::el, $main::imscp_sw_mngr_el);
	exit 1;
}

exit 0;
