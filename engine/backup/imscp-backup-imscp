#!/usr/bin/perl

=head1 NAME

imscp-backup-imscp backup i-MSCP configuration files and database.

=head1 SYNOPSIS

 imscp-backup-imscp [options]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename;
use File::Spec;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Bootstrapper;
use iMSCP::Debug;
use iMSCP::Execute;
use iMSCP::File;
use iMSCP::Dir;
use iMSCP::Getopt;
use iMSCP::Mail;
use POSIX qw/ strftime locale_h /;

setlocale(LC_MESSAGES, "C.UTF-8");

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

our $command = {
    pbzip2 => {
        extension => 'bz2',
        command   => 'pbzip2'
    },
    bzip2  => {
        extension => 'bz2',
        command   => 'bzip2'
    },
    gzip   => {
        extension => 'gz',
        command   => 'gzip'
    },
    pigz   => {
        extension => 'gz',
        command   => 'pigz'
    },
    lzma   => {
        extension => 'lzma',
        command   => 'lzma'
    },
    xz     => {
        extension => 'xz',
        command   => 'xz'
    }
};

sub run
{
    return 0 unless $main::imscpConfig{'BACKUP_IMSCP'} eq 'yes';

    my $algo = lc( $main::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'} );

    unless ( exists $command->{$algo} || $algo eq 'no' ) {
        error( sprintf( 'Backup algorithm not supported: %s', $algo ));
        return 1;
    }

    # Make sure that backup directory exists
    iMSCP::Dir->new( dirname => $main::imscpConfig{'BACKUP_FILE_DIR'} )->make(
        {
            user  => $main::imscpConfig{'ROOT_USER'},
            group => $main::imscpConfig{'ROOT_GROUP'},
            mode  => 0750
        }
    );

    # Backup i-MSCP database
    my $rs = _backupDatabase();
    return $rs if $rs;

    # Backup configuration files
    $rs |= _backupConfig();
    return $rs if $rs;

    # Remove any backup older than 7 days
    $rs = execute(
        "find $main::imscpConfig{'BACKUP_FILE_DIR'}/* -maxdepth 0 -type f -mtime +7 -print | xargs -r rm",
        \ my $stdout,
        \ my $stderr
    );
    debug( $stdout ) if $stdout;
    error( $stderr || 'Unknown error' ) if $rs;

    if ( $rs ) {
        my @warningMessages = getMessageByType( 'warn' );
        iMSCP::Mail->new()->warnMsg( "@warningMessages" ) if @warningMessages;

        my @errorMessages = getMessageByType( 'error' );
        iMSCP::Mail->new()->errmsg( "@errorMessages" ) if @errorMessages;
    }

    $rs;
}

sub _backupDatabase
{
    my $db = iMSCP::Database->factory();

    eval { $db->dumpdb( $main::imscpConfig{'DATABASE_NAME'}, $main::imscpConfig{'BACKUP_FILE_DIR'} ) };
    if ( $@ ) {
        error( $@ );
        return 1;
    }

    # Encode slashes as SOLIDUS unicode character
    # Encode dots as Full stop unicode character
    ( my $encodedDbName = $main::imscpConfig{'DATABASE_NAME'} ) =~ s%([./])%{ '/', '@002f', '.', '@002e' }->{$1}%ge;

    my $date = strftime "%Y.%m.%d-%H-%M", localtime;

    my $rs = iMSCP::File->new(
        filename => $main::imscpConfig{'BACKUP_FILE_DIR'} . '/' . $encodedDbName . '.sql'
    )->moveFile(
        $main::imscpConfig{'BACKUP_FILE_DIR'} . '/' . $encodedDbName . '-' . $date . '.sql'
    );
    return $rs if $rs;

    my $algo = lc( $main::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'} );
    my $level = $main::imscpConfig{'BACKUP_COMPRESS_LEVEL'};
    $level = 1 unless $level =~ /^[1-9]$/;

    if ( $algo ne 'no' ) {
        my @cmd = (
            $command->{$algo}->{'command'},
            "-$level",
            '--force',
            escapeShell( $main::imscpConfig{'BACKUP_FILE_DIR'} . '/' . $encodedDbName . '-' . $date . '.sql' )
        );
        $rs = execute( "@cmd", \ my $stdout, \ my $stderr );
        debug( $stdout ) if $stdout;

        if ( $rs > 1 ) {
            # Tar exit with status 1 only if some files were changed while being read. We want ignore this.
            error( $stderr || 'Unknown error' );
            return $rs if $rs;
        }
    }

    0;
}

sub _backupConfig
{
    my $date = strftime "%Y.%m.%d-%H-%M", localtime;
    my $archivePath = "$main::imscpConfig{'BACKUP_FILE_DIR'}/config-backup-$date.tar";
    my $algo = lc( $main::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'} );
    my $level = $main::imscpConfig{'BACKUP_COMPRESS_LEVEL'};
    $level = 1 unless $level =~ /^[1-9]$/;

    if ( $algo ne 'no' ) {
        $archivePath .= '.' . $command->{$main::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'}}->{'extension'};
    }

    my @backupCommand = (
        "tar -c -C $main::imscpConfig{'CONF_DIR'}",
        '--exclude=?*[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]',
        '--preserve-permissions',
        '.',
        ( $algo eq 'no' ? "-f $archivePath" : "| $command->{$algo}->{'command'} -$level > $archivePath" )
    );

    my $rs = execute( "@backupCommand", \ my $stdout, \ my $stderr );
    debug( $stdout ) if $stdout;
    error( $stderr || 'Unknown error' ) if $rs;
    return $rs if $rs;

    0;
}

newDebug( 'imscp-backup-imscp.log' );

# Parse command line options
iMSCP::Getopt->parseNoDefault( sprintf( "Usage: perl %s [OPTION]...", basename( $0 )) . qq {

Script which backup i-MSCP configuration files and database.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

setVerbose( iMSCP::Getopt->verbose );

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock( '/var/lock/imscp-backup-imscp.lock', 'nowait' );

$bootstrapper->boot(
    {
        config_readonly => 1,
        nolock          => 1
    }
);

exit run();

=head1 AUTHOR

 i-MSCP Team <team@i-mscp.net>

=cut
