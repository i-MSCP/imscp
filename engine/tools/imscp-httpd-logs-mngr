#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2016 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Script responsible to mount httpd log folders into customer's log folder on reboot
# We are doing that using an  @reboot cron job to avoid to edit /etc/fstab file

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::Getopt;
use iMSCP::Mail;
use Servers::httpd;
use File::Basename;

newDebug('imscp-httpd-logs-mngr.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {

Script which generate customer's httpd logs.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-httpd-logs-mngr.lock', 'nowait');
$bootstrapper->boot({ norequirements => 'yes', nolock => 'yes', config_readonly => 'yes' });

sub run
{
	my $rs = 0;
	my $domainNames = iMSCP::Database->factory()->doQuery(
		'domain_name',
		"
			SELECT domain_name, domain_name AS root_domain_name FROM domain WHERE domain_status IN('ok', 'disabled')
			UNION
			SELECT
				alias_name, domain_name AS root_domain_name
			FROM
				domain_aliasses
			INNER JOIN
				domain USING(domain_id)
			WHERE
				alias_status IN('ok', 'disabled')
			UNION
			SELECT
				CONCAT(subdomain_name, '.', domain_name), domain_name AS root_domain_name
			FROM
				subdomain
			JOIN
				domain USING(domain_id)
			WHERE
				subdomain_status IN('ok', 'disabled')
			UNION
			SELECT
				CONCAT(subdomain_alias_name, '.', alias_name), domain_name AS root_domain_name
			FROM
				subdomain_alias
			INNER JOIN
				domain_aliasses USING(alias_id)
			INNER JOIN
				domain USING(domain_id)
			WHERE
				subdomain_alias_status IN('ok', 'disabled')
		"
	);
	unless (ref $domainNames eq 'HASH') {
		error($domainNames);
		$rs = 1;
	} else {
		require Servers::httpd;

		if(Servers::httpd->can('mountLogsFolder')) {
			my $httpd = Servers::httpd->factory();

			for my $domainName(keys %{$domainNames}) {
				my $ret = $httpd->mountLogsFolder({
					DOMAIN_NAME => $domainName,
					HOME_DIR => "$main::imscpConfig{'USER_WEB_DIR'}/$domainNames->{$domainName}->{'root_domain_name'}"
				});
				$rs ||= $ret;
			}
		}
	}

	my @warningMessages = getMessageByType('warn');
	iMSCP::Mail->new()->warnMsg("@warningMessages") if @warningMessages;

	my @errorMessages = getMessageByType('error');
	iMSCP::Mail->new()->errmsg("@errorMessages") if @errorMessages;

	$rs;
}

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-httpd-logs-mngr.lock');
exit $rs;
