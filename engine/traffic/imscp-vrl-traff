#!/usr/bin/perl
# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2016 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Servers;
use iMSCP::Database;
use iMSCP::EventManager;
use iMSCP::Getopt;
use File::Basename;

sub run
{
	my $rs = iMSCP::EventManager->getInstance()->trigger('beforeVrlTraffic');
	return $rs if $rs;

	my $timestamp = time();
	my $halfTimestamp = $timestamp - ($timestamp % 1800);
	my %trafficDb;

	# Collects traffic data
	for my $service(iMSCP::Servers->getInstance()->get()) {
		next if $service eq 'noserver';
		my $package = "Servers::$service";
		eval "require $package";
		unless($@) {
			if ($package->can('getTraffic')) {
				my $instance = $package->factory();
				eval {
					debug("Calling Servers::${service}::getTraffic()");
					$trafficDb{$service} = $instance->getTraffic();
				};
				if ($@) {
					error($@);
					$rs = 1;
					last;
				}
			}
		} else {
			error($@);
			$rs = 1;
			last;
		}
	}

	# Updating traffic data in i-MSCP database
	unless($rs) {
		my $dbh = iMSCP::Database->factory()->getRawDb();

		# Get domains list (dmn|sub|als|alssub)
		my $sth = $dbh->prepare(
			"
				SELECT
					domain_id AS upper_domain_id, domain_name
				FROM
					domain
				UNION
				SELECT
					domain_id AS upper_domain_id, alias_name
				FROM
					domain_aliasses
				UNION
				SELECT
					domain_id AS upper_domain_id, CONCAT(subdomain_name, '.', domain_name)
				FROM
					subdomain
				INNER JOIN
					domain USING (domain_id)
				UNION
				SELECT
					domain_id AS upper_domain_id, CONCAT(subdomain_alias_name, '.', alias_name)
				FROM
					subdomain_alias
				INNER JOIN
					domain_aliasses USING (alias_id)
			"
		);
		unless($sth && $sth->execute()) {
			error(sprintf("Couldn't prepare or execute SQL statement: %s", $dbh->errstr));
			$rs = 1;
		}

		while (my $domainRow = $sth->fetchrow_hashref()) {
			my $domainName = $domainRow->{'domain_name'};
			my $upperDomainId = $domainRow->{'upper_domain_id'};

			next unless $trafficDb{'httpd'}->{$domainName} || $trafficDb{'ftpd'}->{$domainName} ||
				$trafficDb{'mta'}->{$domainName} || $trafficDb{'po'}->{$domainName};

			my $httpdTraffic = $trafficDb{'httpd'}->{$domainName} || 0;
			my $ftpdTraffic = $trafficDb{'ftpd'}->{$domainName} || 0;
			my $mtaTraffic = $trafficDb{'mta'}->{$domainName} || 0;
			my $poTraffic = $trafficDb{'po'}->{$domainName} || 0;

			my $domainTrafficRow = $dbh->selectrow_hashref(
				'SELECT dtraff_id FROM domain_traffic WHERE domain_id = ? AND dtraff_time >= ? LIMIT 1',
				{ }, $upperDomainId, $timestamp
			);

			if($dbh->err) {
				error($dbh->errstr);
				$rs = 1;
				next;
			} elsif($domainTrafficRow) {
				$dbh->do(
					'
						UPDATE
							domain_traffic
						SET
							dtraff_web = dtraff_web + ?, dtraff_ftp = dtraff_ftp + ?, dtraff_mail = dtraff_mail + ?,
							dtraff_pop = dtraff_pop + ?, dtraff_time = ?
						WHERE
							domain_id = ?
						AND
							dtraff_id = ?
					',
					undef, $httpdTraffic, $ftpdTraffic, $mtaTraffic, $poTraffic, $halfTimestamp, $upperDomainId,
					$domainTrafficRow->{'dtraff_id'}
				);
			} else {
				$dbh->do(
					'
						INSERT INTO domain_traffic (
							domain_id, dtraff_time, dtraff_web, dtraff_ftp, dtraff_mail, dtraff_pop
						) VALUES (
							?, ?, ?, ?, ?, ?
						)
					',
					undef, $upperDomainId, $halfTimestamp, $httpdTraffic, $ftpdTraffic, $mtaTraffic, $poTraffic
				);
			}

			if($dbh->err) {
				error($dbh->errstr);
				$rs = 1;
			} else {
				$trafficDb{'httpd'}->{$domainName} = 0;
				$trafficDb{'ftpd'}->{$domainName} = 0;
				$trafficDb{'mta'}->{$domainName} = 0;
				$trafficDb{'po'}->{$domainName} = 0;
			}
		}
	}

	$rs ||= iMSCP::EventManager->getInstance()->trigger('afterVrlTraffic');

	if($rs) {
		require iMSCP::Mail;
		iMSCP::Mail->new()->errmsg(join "\n\n", iMSCP::Debug::getLastError());
	}

	$rs;
}

newDebug('imscp-vrl-traff.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {

Script which collects i-MSCP customers' traffic data (Httpd, Ftpd, Mta, Po).

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-vrl-traff.lock', 'nowait');
$bootstrapper->boot({ norequirements => 'yes', nolock => 'yes', config_readonly => 'yes' });

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-vrl-traff.lock');
exit $rs;
