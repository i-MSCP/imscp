#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2016 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::Getopt;
use File::Basename;

sub start
{
	# Create the IMSCP_INPUT and iMSCP_OUTPUT chains and pass the input/output traffic from all interfaces
	# (excluding lo) through them
	for (
		'-N IMSCP_INPUT',
		'-N IMSCP_OUTPUT',
		'-I INPUT ! -i lo -j IMSCP_INPUT',
		'-I OUTPUT ! -o lo -j IMSCP_OUTPUT'
	) {
		my ($stdout, $stderr);
		my $rs = execute("iptables $_", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;
	}

	my $httpPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTP_PORT'};
	my $httpsPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTPS_PORT'};

	# Monitor the traffic for the given ports
	for my $port($httpPort, $httpsPort, 80, 443, 110, 143, 25, 465, 587, 995, 993, 20, 21) {
		next if $port eq '';
		my ($stdout, $stderr);

		my $rs = execute("iptables -I IMSCP_INPUT -p tcp --dport $port", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;

		$rs = execute("iptables -I IMSCP_OUTPUT -p tcp --sport $port", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;
	}

	# Monitor the traffic for the given ports
	for my $port(qw(25 465 587)) {
		my ($stdout, $stderr);
		my $rs = execute("iptables -I IMSCP_INPUT -p tcp --sport $port", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;

		$rs = execute("iptables -I IMSCP_OUTPUT -p tcp --dport $port", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;
	}

	# Monitor all traffic passing through the i-MSCP chains
	for my $chain('IMSCP_INPUT', 'IMSCP_OUTPUT') {
		my ($stdout, $stderr);
		my $rs = execute("iptables -A $chain -j RETURN", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;
	}

	0;
}

sub stop
{
	# Get list of defined rules
	my ($stdout, $stderr);
	my $rs = execute('iptables -S', \$stdout, \$stderr);
	debug($stdout) if $stdout;
	error($stderr) if $stderr && $rs;
	return $rs if $rs;

	unless($rs) {
		# Retrieve rules defined by i-MSCP on both INPUT and OUTPUT chains
		my %chains = ();
		$chains{$2} = $1 while($stdout =~ /.*?((?:INPUT|OUTPUT).*?(IMSCP_INPUT|IMSCP_OUTPUT))/g);

		if(%chains) {
			# Collect traffic data
			my $rs = execute("perl $main::imscpConfig{'TRAFF_ROOT_DIR'}/imscp-srv-traff", \$stdout, \$stderr);
			debug($stdout) if $stdout;
			warning($stderr) if $stderr && $rs;

			for my $chain(keys %chains) {
				# Remove any rule from the chain and remove the chain
				for my $cmd('-D', '-F', '-X') {
					$rs = execute(
						($cmd ne '-D') ? "iptables $cmd $chain" : "iptables $cmd $chains{$chain}", \$stdout, \$stderr
					);
					debug($stdout) if $stdout;
					error($stderr) if $stderr && $rs;
					return $rs if $rs;
				}
			}
		}
	}

	$rs;
}

sub run
{
	my $action = $ARGV[0] || '';

	if ($action eq 'start') {
		my $rs = start();
		return $rs if $rs;
	} elsif ($action eq 'stop') {
		my $rs = stop();
		return $rs if $rs;
	} else {
		iMSCP::Getopt->showUsage();
	}

	0;
}

newDebug('imscp-net-traffic-logger.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]... start|stop", basename($0)) . qq {

Script which start/stop i-MSCP traffic logger.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

iMSCP::Bootstrapper->getInstance()->boot(
	{ norequirements => 'yes', nodatabase => 'yes', nolock => 'yes', config_readonly => 'yes' }
);

exit run();
