#!/usr/bin/perl

=head1 NAME

 imscp-dsk-quota Computes customer's quota.

=head1 SYNOPSIS

 imscp-dsk-quota [options]...

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use File::Basename;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Bootstrapper;
use iMSCP::Debug qw/ debug error getMessageByType newDebug setVerbose /;
use iMSCP::Execute qw/ execute /;
use iMSCP::Getopt;
use iMSCP::Mail;
use Servers::mta;
use POSIX qw /locale_h /;

setlocale(LC_MESSAGES, "C.UTF-8");

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

=head1 DESCRIPTION

 Computes customer's quota.

=head1 PUBLIC METHODS

=over 4

=item quotaFiles( )

 Computes customer's mail and web quota

 Return void

=cut

sub quotaFiles
{
    eval {
        my $dbh = iMSCP::Database->factory()->getRawDb();
        local $dbh->{'RaiseError'} = 1;

        my $rows = $dbh->selectall_hashref(
            "SELECT domain_id, domain_name FROM domain WHERE domain_status NOT IN ('disabled', 'todelete')", 'domain_id'
        );

        my $virtualMailDir = Servers::mta->factory()->{'config'}->{'MTA_VIRTUAL_MAIL_DIR'};

        while ( my ($dmnId, $dmnData) = each( %{$rows} ) ) {
            my $totalDiskUsage = my $webDiskUsage = my $mailDiskUsage = 0;
            my @items = (
                { webdir => "$main::imscpConfig{'USER_WEB_DIR'}/$dmnData->{'domain_name'}" },
                { maildir => "$virtualMailDir/$dmnData->{'domain_name'}" }
            );

            # Get list of all child domains (sub|als|alssub)
            my $rows2 = eval {
                $dbh->selectall_hashref(
                    "
                        SELECT alias_name AS domain_name
                        FROM domain_aliasses
                        WHERE domain_id = ?
                        AND alias_status <> 'todelete'
        
                        UNION ALL
        
                        SELECT CONCAT(subdomain_name, '.', domain_name) AS domain_name
                        FROM subdomain
                        JOIN domain USING(domain_id)
                        WHERE domain_id = ?
                        AND subdomain_status <> 'todelete'
        
                        UNION ALL
        
                        SELECT CONCAT(subdomain_alias_name, '.',  alias_name) AS domain_name
                        FROM subdomain_alias
                        JOIN domain_aliasses USING(alias_id)
                        WHERE domain_id = ?
                        AND subdomain_alias_status <> 'todelete'
                    ",
                    'domain_name', undef, $dmnId, $dmnId, $dmnId
                );
            };
            if ( $@ ) {
                error( $@ );
            } elsif ( %{$rows2} ) {
                push @items, { maildir => "$virtualMailDir/$_" } for keys %{$rows2};
            }

            for( @items ) {
                my ($dirType, $dir) = %{$_};
                next unless -d $dir;

                if ( $dirType eq 'webdir' ) {
                    my $rs = execute(
                        [ 'du', '--exclude=backups/*', '--exclude=logs/*', '-s', '-B1', $dir ], \ my $stdout,
                        \ my $stderr
                    );
                    error( $stderr || 'Unknown error' ) if $rs;
                    $webDiskUsage = $1 if $stdout && $stdout =~ /^(\d+)/;
                } else {
                    my $rs = execute( [ 'du', '-s', '-B1', $dir ], \ my $stdout, \ my $stderr );
                    error( $stderr || 'Unknown error' ) if $rs;
                    $mailDiskUsage += $1 if $stdout && $stdout =~ /^(\d+)/;
                }
            }

            $totalDiskUsage = $webDiskUsage+$mailDiskUsage;

            eval {
                $dbh->begin_work();
                $dbh->do(
                    '
                        UPDATE domain
                        SET domain_disk_usage = ?, domain_disk_file = ?, domain_disk_mail = ?
                        WHERE domain_id = ?
                    ',
                    undef, $totalDiskUsage, $webDiskUsage, $mailDiskUsage, $dmnId
                );
                $dbh->do(
                    'UPDATE quotatallies SET bytes_in_used = ? WHERE name = ?',
                    undef, $totalDiskUsage, $dmnData->{'domain_name'}
                );
                $dbh->commit();
            };
            if ( $@ ) {
                $dbh->rollback();
                error( $@ );
            }
        }
    };
    error( $@ ) if $@;
}

=item quotaSql( )

 Computes customer's SQL quota

 Return void

=cut

sub quotaSql
{
    eval {
        my $dbh = iMSCP::Database->factory()->getRawDb();
        local $dbh->{'RaiseError'} = 1;

        my $rows = $dbh->selectall_hashref(
            "
                SELECT domain_id, domain_name, domain_disk_usage
                FROM domain
                WHERE domain_status NOT IN ('disabled', 'todelete')
            ",
            'domain_id'
        );

        return 0 unless %{$rows};

        my $databases = $dbh->selectcol_arrayref( 'SHOW DATABASES' );

        while ( my ($dmnId, $dmnData) = each( %{$rows} ) ) {
            my ($size, $sqlSize) = ( 0, 0 );

            my $customerDatabases = $dbh->selectall_hashref(
                'SELECT sqld_name FROM sql_database WHERE domain_id = ?', 'sqld_name', undef, $dmnId
            );

            for my $sqlDbName ( keys %{$customerDatabases} ) {
                next unless grep($_ eq $sqlDbName, @{$databases});

                my $sqlDbTables = $dbh->selectall_hashref(
                    "SHOW TABLE STATUS FROM " . $dbh->quote_identifier( $sqlDbName ), 1
                );

                next unless %{$sqlDbTables};
                $size += $_->{'Data_length'}+$_->{'Index_length'} for values %{$sqlDbTables};
            }

            $sqlSize += $size;
            $size += $dmnData->{'domain_disk_usage'};

            eval {
                local $dbh->{'AutoCommit'} = 0;

                $dbh->do(
                    'UPDATE domain SET domain_disk_usage = ?, domain_disk_sql = ? WHERE domain_id = ?',
                    undef, $size, $sqlSize, $dmnId
                );
                $dbh->do(
                    'UPDATE quotatallies SET bytes_in_used = ? WHERE name = ?', undef, $size, $dmnData->{'domain_name'}
                );
                $dbh->commit();
            };
            if ( $@ ) {
                $dbh->rollback();
                error( $@ );
            }
        }
    };
    error( $@ ) if $@;
}

newDebug( 'imscp-dsk-quota.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]...', basename( $0 )) . qq {

Script which computes customer's quota.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

setVerbose( iMSCP::Getopt->verbose );

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock( '/var/lock/imscp-dsk-quota.lock', 'nowait' );

$bootstrapper->boot(
    {
        mode            => 'backend',
        nolock          => 1,
        config_readonly => 1
    }
);

quotaFiles();
quotaSql();

my @errors = getMessageByType( 'error' );
iMSCP::Mail->new()->errmsg( "@errors" ) if @errors;

=back

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut

1;
__END__
