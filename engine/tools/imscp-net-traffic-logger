#!/usr/bin/perl

=head1 NAME

 imscp-net-traffic-logger - start/stop i-MSCP traffic logger.

=head1 SYNOPSIS

 imscp-net-traffic-logger [options]... start|stop

=cut

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2017 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use File::Basename;
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::Getopt;
use iMSCP::ProgramFinder;
use POSIX qw /locale_h /;

setlocale(LC_MESSAGES, "C.UTF-8");

$ENV{'LANG'} = 'C.UTF-8';
$ENV{'PATH'} = '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin';

my @EXECS;

sub start
{
    my $panelHttpPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTP_PORT'} || undef;
    my $panelHttpsPort = $main::imscpConfig{'BASE_SERVER_VHOST_HTTPS_PORT'} || undef;

    for my $exec( @EXECS ) {
        defined $exec or next;

        # Creating IMSCP_INPUT and IMSCP_OUTPUT chains for incoming/outgoing traffic logging
        for ( qw/ IMSCP_INPUT IMSCP_OUTPUT / ) {
            my $rs = execute( "$exec -t filter -N $_", \ my $stdout, \ my $stderr );
            debug( $stdout ) if $stdout;
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;
        }

        # Adding rules to pass incoming/outgoing traffic through our chains, excluding traffic from/to `lo' interface
        for ( '-I INPUT ! -i lo -j IMSCP_INPUT', '-I OUTPUT ! -o lo -j IMSCP_OUTPUT' ) {
            my $rs = execute( "$exec -t filter $_", \ my $stdout, \ my $stderr );
            debug( $stdout ) if $stdout;
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;
        }

        for ( $panelHttpPort, $panelHttpsPort, 80, 443, 110, 143, 25, 465, 587, 995, 993, 20, 21 ) {
            defined or next;

            # Adding rule for logging incoming traffic to the given port
            my $rs = execute( "$exec -t filter -I IMSCP_INPUT -p tcp --dport $_", \ my $stdout, \ my $stderr );
            debug( $stdout ) if $stdout;
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;

            # Adding rule for logging outgoing traffic from the given port
            $rs = execute( "$exec -t filter -I IMSCP_OUTPUT -p tcp --sport $_", \$stdout, \$stderr );
            debug( $stdout ) if $stdout;
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;
        }

        for ( qw/ 25 465 587 / ) {
            # Adding a rule for logging incoming traffic from the given port
            my $rs = execute( "$exec -t filter -I IMSCP_INPUT -p tcp --sport $_", \ my $stdout, \ my $stderr );
            debug( $stdout ) if $stdout;
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;

            # Adding a rule for logging outgoing traffic to the given port
            $rs = execute( "$exec -t filter -I IMSCP_OUTPUT -p tcp --dport $_", \$stdout, \$stderr );
            debug( $stdout ) if $stdout;
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;
        }

        for ( qw/ IMSCP_INPUT IMSCP_OUTPUT / ) {
            my $rs = execute( "$exec -t filter -A $_ -j RETURN", \ my $stdout, \ my $stderr );
            debug( $stdout ) if $stdout;
            error( $stderr || 'Unknown error' ) if $rs;
            return $rs if $rs;
        }
    }

    0;
}

sub stop
{
    for my $exec( @EXECS ) {
        defined $exec or next;

        my $rs = execute( "$exec -S | grep 'IMSCP_'", \ my $stdout, \ my $stderr );
        debug( $stdout ) if $stdout;
        error( $stderr || 'Unknown error' ) if $rs > 1;
        return $rs if $rs > 1;

        next unless $stdout;

        my %data;
        while ( $stdout =~ /^-(A|N)\s+(((?:IMSCP_)?(?:INPUT|OUTPUT)).*)/gmi ) {
            if ( $1 eq 'A' && index( $3, 'IMSCP' ) != 0 ) {
                push @{$data{'delete'}}, $2;
                next;
            }

            $data{'flush'}->{$3} = 1 unless $data{'flush'}->{$3};
        };

        # Delete i-MSCP rules on INPUT and OUTPUT chains if any
        if ( $data{'delete'} ) {
            for( @{$data{'delete'}} ) {
                $rs = execute( "$exec -t filter -D $_", \$stdout, \$stderr );
                debug( $stdout ) if $stdout;
                error( $stderr || 'Unknown error' ) if $rs;
                return $rs if $rs;
            }
        }

        # Flush and delete i-MSCP chains if any
        if ( $data{'flush'} ) {
            for( keys %{$data{'flush'}} ) {
                $rs = execute( "$exec -t filter -F $_", \$stdout, \$stderr );
                debug( $stdout ) if $stdout;
                error( $stderr || 'Unknown error' ) if $rs;
                return $rs if $rs;

                $rs ||= execute( "$exec -t filter -X $_", \$stdout, \$stderr );
                debug( $stdout ) if $stdout;
                error( $stderr || 'Unknown error' ) if $rs;
                return $rs if $rs;
            }
        }
    }

    0;
}

newDebug( 'imscp-net-traffic-logger.log' );

iMSCP::Getopt->parseNoDefault( sprintf( 'Usage: perl %s [OPTION]... start|stop', basename( $0 )) . qq {

Script that start/stop i-MSCP traffic logger.

OPTIONS:
 -d,    --debug         Enable debug mode.
 -v,    --verbose       Enable verbose mode.},
    'debug|d'   => \&iMSCP::Getopt::debug,
    'verbose|v' => \&iMSCP::Getopt::verbose
);

my $action = shift;
$action && $action =~ /^(?:start|stop)$/ or iMSCP::Getopt->showUsage();

setVerbose( iMSCP::Getopt->verbose );

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock( '/var/lock/imscp-net-traffic-logger.lock', 'nowait' );

$bootstrapper->boot(
    {
        config_readonly => 1,
        nodatabase      => 1,
        nokeys          => 1,
        nolock          => 1
    }
);

@EXECS = (
    iMSCP::ProgramFinder::find( 'iptables' ),
    ( $main::imscpConfig{'IPV6_SUPPORT'} ? iMSCP::ProgramFinder::find( 'ip6tables' ) : undef )
);

my %dispatch = (
    start => sub { stop() || start() },
    stop  => \&stop
);

exit $dispatch{ $action }->();

=head1 AUTHOR

 Laurent Declercq <l.declercq@nuxwin.com>

=cut
