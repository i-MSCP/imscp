#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use POSIX;
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::File;
use iMSCP::Dir;
use iMSCP::Getopt;
use File::Basename;
use POSIX qw/strftime/;

our $command = {
	pbzip2 => { extension => 'bz2', command => 'pbzip2' },
	bzip2 => { extension => 'bz2', command => 'bzip2' },
	gzip => { extension => 'gz', command => 'gzip' },
	pigz => { extension => 'gz', command => 'pigz' },
	lzma => { extension => 'lzma', command => 'lzma' },
	xz => { extension => 'xz', command => 'xz' }
};

sub run
{
	return 0 unless $main::imscpConfig{'BACKUP_IMSCP'} eq 'yes';

	my $algo = lc($main::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'});

	unless(exists $command->{$algo} || $algo eq 'no') {
		error(sprintf('Backup algorithm not supported: %s', $algo));
		return 1;
	}

	# Make sure that backup directory exists
	my $rs = iMSCP::Dir->new( dirname => $main::imscpConfig{'BACKUP_FILE_DIR'} )->make(
		{ user => $main::imscpConfig{'ROOT_USER'}, group => $main::imscpConfig{'ROOT_GROUP'}, mode => 0750 }
	);
	return $rs if $rs;

	# Backup i-MSCP database
	$rs = _backupDatabase();
	return $rs if $rs;

	# Backup configuration files
	$rs |= _backupConfig();
	return $rs if $rs;

	# Remove any backup older than 7 days
	$rs = execute(
		"find $main::imscpConfig{'BACKUP_FILE_DIR'}/* -maxdepth 0 -type f -mtime +7 -print | xargs -r rm",
		\ my $stdout,
		\ my $stderr
	);
	debug($stdout) if $stdout;
	error($stderr) if $stderr && $rs;
	return $rs if $rs;

	my @errorMessages = (getMessageByType('warn'), getMessageByType('error'));
	if(@errorMessages) {
		require iMSCP::Mail;
		iMSCP::Mail->new()->errmsg("@errorMessages");
	}

	0;
}

sub _backupDatabase
{
	my $db = iMSCP::Database->factory();

	return 0 unless $db->can('dumpdb');

	my $date = strftime "%Y.%m.%d-%H-%M", localtime;
	my $sqlFName = "$main::imscpConfig{'BACKUP_FILE_DIR'}/$main::imscpConfig{'DATABASE_NAME'}-$date.sql";

	my $rs = $db->dumpdb($main::imscpConfig{'DATABASE_NAME'}, $sqlFName);
	error(sprintf('Could not dump the %s database', $main::imscpConfig{'DATABASE_NAME'})) if $rs;
	return $rs if $rs;

	my $algo = lc($main::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'});
	my $level = $main::imscpConfig{'BACKUP_COMPRESS_LEVEL'};
	$level = 1 unless $level =~ /^[1-9]$/;

	if($algo ne 'no') {
		my @cmd = ($command->{$algo}->{'command'}, "-$level", '--force', escapeShell($sqlFName));
		$rs = execute("@cmd", \ my $stdout, \ my $stderr);
		debug($stdout) if $stdout;

		if($rs > 1) { # Tar exit with status 1 only if some files were changed while being read. We want ignore this.
			error($stderr) if $stderr;
			return $rs if $rs;
		}
	}

	0;
}

sub _backupConfig
{
	my $date = strftime "%Y.%m.%d-%H-%M", localtime;
	my $archivePath = "$main::imscpConfig{'BACKUP_FILE_DIR'}/config-backup-$date.tar";
	my $algo = lc($main::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'});
	my $level = $main::imscpConfig{'BACKUP_COMPRESS_LEVEL'};
	$level = 1 unless $level =~ /^[1-9]$/;

	if($algo ne 'no') {
		$archivePath .= '.' . $command->{$main::imscpConfig{'BACKUP_COMPRESS_ALGORITHM'}}->{'extension'};
	}

	my @backupCommand = (
		"tar -c -C $main::imscpConfig{'CONF_DIR'}",
		 '--exclude=?*[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]',
		 '--preserve-permissions',
		 '.',
		$algo eq 'no' ? "-f $archivePath" : "| $command->{$algo}->{'command'} -$level > $archivePath"
	);

	my $rs = execute("@backupCommand", \ my $stdout, \ my $stderr);
	debug($stdout) if $stdout;
	error($stderr) if $stderr && $rs;
	error('Could not create i-MSCP configuration backup') if $rs && !$stderr;
	return $rs if $rs;

	0;
}

newDebug('imscp-backup-imscp.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {

Script which backup i-MSCP configuration files and database.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-backup-imscp.lock', 'nowait');
$bootstrapper->boot({ norequirements => 'yes', nofail => 'yes', nolock => 'yes', config_readonly => 'yes' });

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-backup-imscp.lock');
exit $rs;
