#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2015 by i-MSCP | http://i-mscp.net
# @author      Daniel Andreca <sci2tech@gmail.com>
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../PerlLib";

use iMSCP::Debug;
use iMSCP::Bootstrapper;
use Mail::Address;
use MIME::Entity;
use Email::Simple;

# Turn off localisation features to force any command output to be in english
$ENV{'LANG'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

umask(027);

newDebug('imscp-arpl-msgr/imscp-arpl-msgr.log');

iMSCP::Bootstrapper->getInstance()->boot(
	{ 'nolock' => 'yes', 'norequirements' => 'yes', 'config_readonly' => 'yes' }
);

sub run
{
	my $from = $ARGV[0];

	$from =~ s/imscp-arpl\.//gim;

	my $message = do { local $/; <STDIN> };

	my $database = iMSCP::Database->factory();

	my $rdata = $database->doQuery('delete', "DELETE FROM `autoreplies_log` WHERE ADDTIME(`time`, '24:00:00') < NOW()");
	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	my $mail = Email::Simple->new($message);
	my ($to) = Mail::Address->parse($mail->header('From'));

	if (not $to) {
		error("Unable to parse From header");
		return 0;
	}

	$to = lc($to->address);

	if(
		$mail->header('X-Mailer') && $mail->header('X-Mailer') =~ /Auto-Reply Mailer/i ||
		$mail->header('Auto-Submitted') && $mail->header('Auto-Submitted') =~ /auto-replied/i ||
		$mail->header('Sender') && $mail->header('Sender') =~ /autoresponder/i ||
		$mail->header('X-Autoresponse-From')
	) {
		return 0;
	}

	$rdata = $database->doQuery(
		'time',
		"SELECT `time` FROM `autoreplies_log` WHERE `from` = ? AND `to` = ? AND ADDTIME(`time`, '24:00:00') > NOW()",
		$from,
		$to
	);
	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	return 0 unless ! %{$rdata};

	$rdata = iMSCP::Database->factory()->doQuery(
		'mail_auto_respond_text',
		'SELECT `mail_auto_respond_text` FROM `mail_users` WHERE `mail_addr` = ? AND `mail_auto_respond` = 1',
		$from
	);
	unless(ref $rdata eq 'HASH'){
		error($rdata);
		return 1;
	}

	return 0 unless %{$rdata};

	my $out = new MIME::Entity;

	$out->build(
		From => $from,
		To => $to,
		Subject => '[Auto-Reply] ' . $mail->header('Subject'),
		Type => 'multipart/mixed; charset=utf-8',
		'X-Autoresponse-From' => $from,
		'X-Mailer' => "i-MSCP Auto-Reply Mailer"
	);

	$out->attach(
		Type => 'text/plain; charset=utf-8',
		Encoding => '8bit',
		Description => 'Mail User Auto-Reply Message',
		Data => (keys %{$rdata})[0]
	);

	$out->attach(
		Type => 'message/rfc822',
		Description => 'Original Message',
		Data => $message
	);

	open MAIL, '|-', '/usr/sbin/sendmail -t -oi' // fatal("Unable to send auto-reply message: $!");
	$out->print(\*MAIL);
	close MAIL;

	# Log autoreply
	$rdata = $database->doQuery(
		'insert', 'INSERT INTO `autoreplies_log` (`time`, `from`, `to`) VALUES (NOW(), ?, ?)', $from, $to
	);
	unless(ref $rdata eq 'HASH'){
		error($rdata);
		return 1;
	}

	0;
}

exit run();
